//
//  MessagesViewController.swift
//  imessageExtension
//
//  Created by Isabel  Lee on 05/03/2017.
//  Copyright Â© 2017 Isabel  Lee. All rights reserved.
//
// https://code.tutsplus.com/tutorials/create-an-imessage-app-in-ios-10--cms-26870
// https://medium.com/@shahabejaz/building-a-custom-sticker-pack-imessage-application-for-ios-10-368285c9a2c#.dadcszf5n

import UIKit
import Messages



class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        super.willBecomeActive(with: conversation)
        
        // Present the view controller appropriate for the conversation and presentation style.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        guard let conversation = activeConversation else { fatalError("Expected an active converstation") }
        
        // Present the view controller appropriate for the conversation and presentation style.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        // Determine the controller to present.

        let controller: UIViewController
        if presentationStyle == .compact {
            controller = instantiateSamllController()
            
        }
        else {
            controller = instantiateBigController()
        }
        
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        // Embed the new controller.
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
    }
    
    private func instantiateSamllController() -> UIViewController {
        // Instantiate a `IceCreamsViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "smallView") as? smallViewController else { fatalError("Unable to instantiate an IceCreamsViewController from the storyboard") }
        controller.delegate = self
        
        return controller
    }
    
    private func instantiateBigController() -> UIViewController {
        // Instantiate a `IceCreamsViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: "bigView") as? bigViewController else { fatalError("Unable to instantiate an IceCreamsViewController from the storyboard") }
        
        return controller
    }
    
    
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: smallViewDelegate {
    func sendImage(img: UIImage) {
        print("image received")
        let layout = MSMessageTemplateLayout()
        layout.caption = "HI"
        layout.image = img
        let message = MSMessage()
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
    }
}
